{"version":3,"sources":["generator/src/nodegit_util.js"],"names":[],"mappings":"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","file":"generator/src/nodegit_util.js","sourcesContent":["/// <reference path=\"../../typings/node/node.d.ts\" />\n/// <reference path=\"../../typings/lodash/lodash.d.ts\" />\n/// <reference path=\"../../typings/fs-extra/fs-extra.d.ts\" />\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments)).next());\n    });\n};\nlet nodegit = require(\"nodegit\");\nconst util_1 = require(\"./util\");\nconst HEAD = \"HEAD\";\nconst ORIGIN = \"ORIGIN\";\nfunction addAllAndCommit(path, user, commitMessage, initial) {\n    return __awaiter(this, void 0, Promise, function* () {\n        util_1.Log.info(`git commit -a -m \"${commitMessage}\"`);\n        let repo = yield nodegit.Repository.open(path);\n        let index = yield repo.openIndex();\n        yield index.addAll();\n        yield index.write();\n        let oid = yield index.writeTree();\n        var author = nodegit.Signature.now(user, user);\n        var committer = nodegit.Signature.now(user, user);\n        if (initial)\n            return yield repo.createCommit(HEAD, author, committer, commitMessage, oid, []);\n        let head = yield nodegit.Reference.nameToId(repo, HEAD);\n        let parent = yield repo.getCommit(head);\n        return yield repo.createCommit(HEAD, author, committer, commitMessage, oid, [parent]);\n    });\n}\nexports.addAllAndCommit = addAllAndCommit;\nfunction checkoutGhPagesBranch(path, user) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let repo = undefined;\n        /** initialize repository if not exist */\n        try {\n            repo = yield nodegit.Repository.open(path);\n        }\n        catch (error) {\n            util_1.Log.info(\"git init\");\n            repo = yield nodegit.Repository.init(path, 0);\n        }\n        let branch = undefined;\n        /** do initial commit if not exist */\n        try {\n            branch = yield repo.getCurrentBranch();\n        }\n        catch (error) {\n            yield addAllAndCommit(path, user, \"initial commit\", true);\n            repo = yield nodegit.Repository.open(path);\n            branch = yield repo.getCurrentBranch();\n        }\n        /** lookup gh-pages branch and create it if not exists */\n        try {\n            let ghPagesBranch = yield repo.getBranch(\"gh-pages\");\n        }\n        catch (error) {\n            util_1.Log.info(\"git branch gh-pages HEAD\");\n            let headCommit = yield repo.getHeadCommit();\n            yield repo.createBranch(\"gh-pages\", headCommit, 0, repo.defaultSignature(), \"message\");\n        }\n        /** checkout gh-pages */\n        let branchName = branch.name();\n        if (!branchName.endsWith(\"/gh-pages\")) {\n            util_1.Log.info(\"git checkout gh-pages\");\n            repo = yield nodegit.Repository.open(path);\n            return yield repo.checkoutBranch(\"gh-pages\", {\n                checkoutStrategy: nodegit.Checkout.STRATEGY.SAFE | nodegit.Checkout.STRATEGY.RECREATE_MISSING\n            });\n        }\n        return yield Promise.resolve();\n    });\n}\nexports.checkoutGhPagesBranch = checkoutGhPagesBranch;\n/**\n * branchName: e.g 'gh-pages'\n * remoteName: e.g 'origin'\n * gitUrl: e.g 'git@github.com:1ambda/oh-my-github'\n */\nfunction push(path, branchName, remoteName, gitUrl) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let repo = yield nodegit.Repository.open(path);\n        let remote = undefined;\n        try {\n            remote = yield nodegit.Remote.lookup(repo, remoteName);\n        }\n        catch (error) {\n            util_1.Log.info(`git remote add ${remoteName} ${gitUrl}`);\n            remote = yield nodegit.Remote.create(repo, remoteName, gitUrl);\n        }\n        util_1.Log.info(`git push ${ORIGIN} ${branchName}:${branchName} --force`);\n        return yield remote.push([`+refs/heads/${branchName}:refs/heads/${branchName}`], { callbacks: {\n                credentials: function (url, userName) {\n                    return nodegit.Cred.sshKeyFromAgent(userName);\n                }\n            } });\n    });\n}\nexports.push = push;\nfunction publish(user, repoName) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let path = process.cwd();\n        let branchName = \"gh-pages\";\n        let remoteName = \"origin\";\n        let gitUrl = `git@github.com:${user}/${repoName}`;\n        let commitMessage = `Update profile (${(new Date).toISOString()})`;\n        yield checkoutGhPagesBranch(path, user);\n        yield addAllAndCommit(path, user, commitMessage, false);\n        yield push(path, branchName, remoteName, gitUrl);\n    });\n}\nexports.publish = publish;\n"],"sourceRoot":"/source/"}