{"version":3,"sources":["generator/src/util.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAI,WAAU,QAAQ,gBAAR,CAAV;;;;AACJ,IAAM,SAAS,IAAT;;IACO;;;;;;;mCACS,QAAQ;AACtB,mBAAO,KAAK,KAAL,CAAW,yBAAe,MAAf,CAAX,CAAP,CADsB;;;;gCAGX,KAAK,KAAK,QAAQ;AAC7B,mBAAO,SAAQ,GAAR,EAAa,GAAb,EAAkB,MAAlB,CAAP,CAD6B;;;;2CAGP,OAAO;AAC7B,gBAAI,GAAJ,CAAW,eAAU,MAAM,IAAN,OAArB,EAAqC,MAAM,OAAN,CAArC,CAD6B;AAE7B,oBAAQ,IAAR,CAAa,CAAC,CAAD,CAAb,CAF6B;;;;6CAIL,SAAS;AACjC,gBAAI,GAAJ,CAAW,mBAAX,EAA6B,OAA7B,EADiC;AAEjC,oBAAQ,IAAR,CAAa,CAAC,CAAD,CAAb,CAFiC;;;;sCAIhB;AACjB,oBAAQ,IAAR,CAAa,CAAb,EADiB;;;WAfZ;;;IAmBA;;;;;;;6BACG,KAAK,SAAS;AACtB,oBAAQ,GAAR,MAAe,iBAAU,GAAV,IAAiB,OAAhC,EADsB;;;;4BAGf,KAAK,SAAS;AACrB,oBAAQ,GAAR,MAAe,gBAAS,GAAT,IAAgB,OAA/B,EADqB;;;;8BAGZ,KAAK,SAAS;AACvB,oBAAQ,GAAR,MAAe,kBAAW,GAAX,IAAkB,OAAjC,EADuB;;;;+BAGb,KAAK,SAAS;AACxB,oBAAQ,GAAR,MAAe,mBAAY,GAAZ,IAAmB,OAAlC,EADwB;;;;gCAGb,KAAK,SAAS;AACzB,oBAAQ,GAAR,MAAe,oBAAa,GAAb,IAAoB,OAAnC,EADyB;;;;oCAGV,KAAK,SAAS;AAC7B,oBAAQ,GAAR,MAAe,MAAM,iBAAU,OAAV,CAArB,EAD6B;;;;mCAGf,KAAK,SAAS;AAC5B,oBAAQ,GAAR,MAAe,MAAM,gBAAS,OAAT,CAArB,EAD4B;;;;qCAGZ,KAAK,SAAS;AAC9B,oBAAQ,GAAR,MAAe,MAAM,kBAAW,OAAX,CAArB,EAD8B;;;;sCAGb,KAAK,SAAS;AAC/B,oBAAQ,GAAR,MAAe,MAAM,mBAAY,OAAZ,CAArB,EAD+B;;;;uCAGb,KAAK,SAAS;AAChC,oBAAQ,GAAR,MAAe,MAAM,oBAAa,OAAb,CAArB,EADgC;;;;6BAGxB,SAAS;AACjB,gBAAI,KAAJ,CAAa,kBAAb,EAA8B,OAA9B,EADiB;;;;6BAGT,SAAS;AACjB,gBAAI,GAAJ,CAAW,kBAAX,EAA4B,OAA5B,EADiB;;;WAlCZ","file":"generator/src/util.js","sourcesContent":["/// <reference path=\"../../typings/node/node.d.ts\" />\n/// <reference path=\"../../typings/chalk/chalk.d.ts\" />\n/// <reference path=\"../../typings/lodash/lodash.d.ts\" />\nimport { red as chalkRed, blue as chalkBlue, green as chalkGreen, yellow as chalkYellow, magenta as chalkMagenta } from \"chalk\";\nlet unionBy = require('lodash.unionby');\nconst indent = '  ';\nexport class Util {\n    static copyObject(object) {\n        return JSON.parse(JSON.stringify(object));\n    }\n    static unionBy(ts1, ts2, filter) {\n        return unionBy(ts1, ts2, filter);\n    }\n    static reportErrorAndExit(error) {\n        Log.red(`${indent}[${error.name}] `, error.message);\n        process.exit(-1);\n    }\n    static reportMessageAndExit(message) {\n        Log.red(`${indent}[ERROR] `, message);\n        process.exit(-1);\n    }\n    static exitProcess() {\n        process.exit(1);\n    }\n}\nexport class Log {\n    static blue(tag, message) {\n        console.log(`${chalkBlue(tag)}${message}`);\n    }\n    static red(tag, message) {\n        console.log(`${chalkRed(tag)}${message}`);\n    }\n    static green(tag, message) {\n        console.log(`${chalkGreen(tag)}${message}`);\n    }\n    static yellow(tag, message) {\n        console.log(`${chalkYellow(tag)}${message}`);\n    }\n    static magenta(tag, message) {\n        console.log(`${chalkMagenta(tag)}${message}`);\n    }\n    static blueReverse(tag, message) {\n        console.log(`${tag}${chalkBlue(message)}`);\n    }\n    static redReverse(tag, message) {\n        console.log(`${tag}${chalkRed(message)}`);\n    }\n    static greenReverse(tag, message) {\n        console.log(`${tag}${chalkGreen(message)}`);\n    }\n    static yellowReverse(tag, message) {\n        console.log(`${tag}${chalkYellow(message)}`);\n    }\n    static magentaReverse(tag, message) {\n        console.log(`${tag}${chalkMagenta(message)}`);\n    }\n    static info(message) {\n        Log.green(`${indent}[INFO] `, message);\n    }\n    static warn(message) {\n        Log.red(`${indent}[WARN] `, message);\n    }\n}\n"],"sourceRoot":"/source/"}